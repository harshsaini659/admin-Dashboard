<%- include('../partials/header') %>
<%- include('../partials/sidebar') %>
        <main class="main-wrap">
<%- include('../partials/navbar') %>
            <section class="content-main">
                <div class="content-header">
                    <div>
                        <h2 class="content-title card-title"><%= title %></h2>
                        <p>Add a new product to your inventory</p>
                    </div>
                    <div>
                        <a href="/admin/user/products" class="btn btn-light">
                            <i class="material-icons md-arrow_back"></i> Back to Products
                        </a>
                    </div>
                </div>
                
                <!-- Error Message -->
                <% if (typeof error !== 'undefined' && error) { %>
                    <div class="alert alert-danger alert-dismissible fade show" role="alert">
                        <%= error %>
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                <% } %>
                
                <div class="row justify-content-center">
                    <div class="col-lg-8">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h4>Product Information</h4>
                            </div>
                            <div class="card-body">
                                <form id="productForm">
                                    <div class="mb-4">
                                        <label for="productName" class="form-label">Product Name <span class="text-danger">*</span></label>
                                        <input type="text" class="form-control" id="productName" name="name" required>
                                    </div>
                                    
                                    <div class="row">
                                        <!-- Parent Category Tree Dropdown -->
                                        <div class="col-12 mb-3">
                                            <label for="categoryParent" class="form-label">Category <span class="text-danger">*</span></label>
                                            <input type="text" id="categoryParentTree" class="form-control" placeholder="Select a category" readonly>
                                            <input type="hidden" id="categoryParent" name="category" value="">
                                            <div class="form-text">Select a product category</div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-4">
                                                <label for="variantStatus" class="form-label">Status</label>
                                                <select class="form-select" id="variantStatus" name="status">
                                                    <option value="active" selected>Active</option>
                                                    <option value="inactive">Inactive</option>
                                                </select>
                                                <div class="form-text">Set the product availability status</div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Added Variants Display Section -->
                                    <div id="addedVariantsSection" class="mb-4" style="display: none;">
                                        <label class="form-label">Added Variants</label>
                                        <div id="addedVariantsList" class="d-flex flex-wrap gap-2">
                                            <!-- Added variants will appear here as chips -->
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-md-4">
                                            <div class="mb-4">
                                                <label for="productVariant" class="form-label">Variant <span class="text-danger">*</span></label>
                                                <select class="form-select" id="productVariant" name="variant" required>
                                                    <option value="">Select Variant</option>
                                                    <% if (typeof variants !== 'undefined' && variants.length > 0) { %>
                                                        <% variants.forEach(variant => { %>
                                                            <option value="<%= variant._id %>"><%= variant.name %></option>
                                                        <% }) %>
                                                    <% } %>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="mb-4">
                                                <label for="productVariantAtt" class="form-label">Variant Attribute <span class="text-danger">*</span></label>
                                                <select class="form-select" id="productVariantAtt" name="variantAttribute" required disabled>
                                                    <option value="">Select Variant First</option>
                                                </select>
                                                <div class="form-text">Select a variant first to see available attributes</div>
                                            </div>
                                        </div>
                                        <div class="col-md-4">
                                            <div class="mb-4">
                                                <label class="form-label">&nbsp;</label>
                                                <div>
                                                    <button type="button" class="btn btn-outline-primary" onclick="addVariant()">
                                                        <i class="material-icons md-add"></i> Add
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Short Description Field -->
                                    <div class="mb-4">
                                        <label for="productShortDescription" class="form-label">Short Description <span class="text-danger">*</span></label>
                                        <textarea class="form-control" id="productShortDescription" name="shortDescription" rows="2" required placeholder="Brief summary of the product"></textarea>
                                    </div>
                                    
                                    <!-- Rich Text Description Field -->
                                    <div class="mb-4">
                                        <label for="productDescription" class="form-label">Description <span class="text-danger">*</span></label>
                                        <div id="descriptionEditor" style="height: 200px;"></div>
                                        <textarea class="form-control d-none" id="productDescription" name="description" required></textarea>
                                    </div>
                                    
                                    <!-- Image Upload Field -->
                                    <div class="mb-4">
                                        <label for="productImage" class="form-label">Product Image</label>
                                        <input type="file" class="form-control" id="productImage" name="image" accept="image/*">
                                        <div class="form-text">Upload product image (JPEG, PNG, WEBP - Max 5MB)</div>
                                        
                                        <!-- Image Preview Container -->
                                        <div id="imagePreviewContainer" class="mt-3" style="display: none;">
                                            <div class="card" style="max-width: 300px;">
                                                <div class="card-body p-2">
                                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                                        <small class="text-muted">Image Preview</small>
                                                        <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeImagePreview()">
                                                            <i class="material-icons md-close"></i>
                                                        </button>
                                                    </div>
                                                    <img id="imagePreview" src="" alt="Preview" class="img-fluid rounded" style="max-height: 200px; object-fit: cover;">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Action Buttons at Bottom -->
                <div class="row justify-content-center">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <a href="/admin/user/products" class="btn btn-light">
                                        <i class="material-icons md-cancel"></i> Cancel
                                    </a>
                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn btn-secondary" onclick="saveDraft()">
                                            <i class="material-icons md-drafts"></i> Save as Draft
                                        </button>
                                        <button type="button" class="btn btn-primary" onclick="saveProduct()">
                                            <i class="material-icons md-save"></i> Save Product
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        
        </script>
        
        <!-- Quill Rich Text Editor -->
        <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
        <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
        
        <script>
            let quill;
            
            // Initialize Quill editor
            document.addEventListener('DOMContentLoaded', function() {
                quill = new Quill('#descriptionEditor', {
                    theme: 'snow',
                    placeholder: 'Enter detailed product description...',
                    modules: {
                        toolbar: [
                            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                            [{ 'font': [] }],
                            [{ 'size': ['small', false, 'large', 'huge'] }],
                            ['bold', 'italic', 'underline', 'strike'],
                            [{ 'color': [] }, { 'background': [] }],
                            [{ 'script': 'sub'}, { 'script': 'super' }],
                            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                            [{ 'indent': '-1'}, { 'indent': '+1' }],
                            [{ 'align': [] }],
                            ['blockquote', 'code-block'],
                            ['link', 'image'],
                            ['clean']
                        ]
                    }
                });
                
                // Initialize image upload preview
                initializeImagePreview();
                
                // Initialize variant filtering
                initializeVariantFiltering();
                
                // Auto-dismiss alerts
                const alerts = document.querySelectorAll('.alert.alert-dismissible');
                alerts.forEach(function(alert) {
                    setTimeout(function() {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }, 5000);
                });
            });
            
            // Collect form data
            function collectFormData() {
                const form = document.getElementById('productForm');
                const formData = new FormData(form);
                
                // Get rich text content from Quill editor
                const description = quill.getContents();
                const descriptionHTML = quill.root.innerHTML;
                
                // Get image file
                const imageFile = document.getElementById('productImage').files[0];
                
                const data = {
                    name: formData.get('name'),
                    shortDescription: formData.get('shortDescription'),
                    description: descriptionHTML,
                    category: formData.get('category'),
                    status: formData.get('status'),
                    addedVariants: addedVariants, // Use the addedVariants array
                    hasImage: !!imageFile
                };
                
                // If there's an image, we'll need to handle file upload separately
                if (imageFile) {
                    data.imageFile = imageFile;
                }
                
                return data;
            }
            
            // Save product
            function saveProduct() {
                const formData = collectFormData();
                formData.status = formData.status || 'active'; // Ensure status is set
                submitProduct(formData);
            }
            
            // Save as draft
            function saveDraft() {
                const formData = collectFormData();
                formData.status = 'inactive'; // Draft is always inactive
                submitProduct(formData);
            }
            
            // Submit product
            function submitProduct(data) {
                // Validate required fields
                if (!data.category || data.category === '' || data.category === 'null') {
                    alert('Please select a category for the product');
                    return;
                }
                
                if (!data.name || !data.name.trim()) {
                    alert('Please enter a product name');
                    return;
                }
                
                if (!data.shortDescription || !data.shortDescription.trim()) {
                    alert('Please enter a short description');
                    return;
                }
                
                if (!data.description || data.description.trim() === '<p><br></p>' || data.description.trim() === '') {
                    alert('Please enter a detailed description');
                    return;
                }
                
                // Validate variants
                if (!data.addedVariants || data.addedVariants.length === 0) {
                    alert('Please add at least one variant');
                    return;
                }
                
                // Create FormData for file upload
                const formData = new FormData();
                
                // Add regular form fields
                formData.append('name', data.name);
                formData.append('shortDescription', data.shortDescription);
                formData.append('description', data.description);
                formData.append('category', data.category);
                formData.append('status', data.status);
                
                // Add variants data
                if (data.addedVariants.length > 0) {
                    // For single variant (backward compatibility)
                    formData.append('variant', data.addedVariants[0].variantId);
                    formData.append('variantAttribute', data.addedVariants[0].variantAttributeId);
                    
                    // For multiple variants (future use)
                    data.addedVariants.forEach((variant, index) => {
                        formData.append(`variants[${index}][variant]`, variant.variantId);
                        formData.append(`variants[${index}][variantAttribute]`, variant.variantAttributeId);
                    });
                }
                
                // Add image file if present
                if (data.imageFile) {
                    formData.append('image', data.imageFile);
                }
                
                fetch('/admin/user/products/create', {
                    method: 'POST',
                    body: formData // Don't set Content-Type header, let browser set it with boundary
                })
                .then(response => response.json())
                .then(result => {
                    if (result.message && result.message.includes('successfully')) {
                        window.location.href = '/admin/user/products?success=' + encodeURIComponent(result.message);
                    } else {
                        throw new Error(result.message || 'Unknown error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error saving product: ' + error.message);
                });
            }
            
            // Initialize image preview functionality
            function initializeImagePreview() {
                const imageInput = document.getElementById('productImage');
                const previewContainer = document.getElementById('imagePreviewContainer');
                const previewImage = document.getElementById('imagePreview');
                
                imageInput.addEventListener('change', function(event) {
                    const file = event.target.files[0];
                    
                    if (file) {
                        // Validate file type
                        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
                        if (!allowedTypes.includes(file.type)) {
                            alert('Please select a valid image file (JPEG, PNG, or WEBP)');
                            this.value = '';
                            previewContainer.style.display = 'none';
                            return;
                        }
                        
                        // Validate file size (5MB max)
                        const maxSize = 5 * 1024 * 1024; // 5MB in bytes
                        if (file.size > maxSize) {
                            alert('File size must be less than 5MB');
                            this.value = '';
                            previewContainer.style.display = 'none';
                            return;
                        }
                        
                        // Create FileReader to read the file
                        const reader = new FileReader();
                        reader.onload = function(e) {
                            previewImage.src = e.target.result;
                            previewContainer.style.display = 'block';
                        };
                        reader.readAsDataURL(file);
                    } else {
                        previewContainer.style.display = 'none';
                    }
                });
            }
            
            // Remove image preview
            function removeImagePreview() {
                const imageInput = document.getElementById('productImage');
                const previewContainer = document.getElementById('imagePreviewContainer');
                
                imageInput.value = '';
                previewContainer.style.display = 'none';
            }
            
            // Array to store added variants
            let addedVariants = [];
            
            // Add variant functionality
            function addVariant() {
                const variantSelect = document.getElementById('productVariant');
                const variantAttributeSelect = document.getElementById('productVariantAtt');
                
                // Check if both are selected
                if (!variantSelect.value || !variantAttributeSelect.value) {
                    alert('Please select both Variant and Variant Attribute');
                    return;
                }
                
                // Get selected text and values
                const variantText = variantSelect.options[variantSelect.selectedIndex].text;
                const variantAttributeText = variantAttributeSelect.options[variantAttributeSelect.selectedIndex].text;
                const variantId = variantSelect.value;
                const variantAttributeId = variantAttributeSelect.value;
                
                // Check if this combination already exists
                const existingVariant = addedVariants.find(v => 
                    v.variantId === variantId && v.variantAttributeId === variantAttributeId
                );
                
                if (existingVariant) {
                    alert('This variant combination has already been added');
                    return;
                }
                
                // Add to array
                const variantData = {
                    variantId: variantId,
                    variantText: variantText,
                    variantAttributeId: variantAttributeId,
                    variantAttributeText: variantAttributeText
                };
                
                addedVariants.push(variantData);
                
                // Display the added variant
                displayAddedVariant(variantData, addedVariants.length - 1);
                
                // Clear selections
                clearVariantSelections();
                
                // Show the added variants section
                document.getElementById('addedVariantsSection').style.display = 'block';
            }
            
            // Display added variant as a chip
            function displayAddedVariant(variantData, index) {
                const addedVariantsList = document.getElementById('addedVariantsList');
                
                const chip = document.createElement('span');
                chip.className = 'badge bg-light text-dark border me-2 mb-2';
                chip.innerHTML = `
                    ${variantData.variantText} - ${variantData.variantAttributeText}
                    <button type="button" class="btn-close btn-close-sm ms-2" onclick="removeVariant(${index})" style="font-size: 0.7em;"></button>
                `;
                chip.id = `variant-chip-${index}`;
                
                addedVariantsList.appendChild(chip);
            }
            
            // Remove variant from list
            function removeVariant(index) {
                // Remove from array
                addedVariants.splice(index, 1);
                
                // Refresh display
                refreshVariantDisplay();
            }
            
            // Refresh the variant display
            function refreshVariantDisplay() {
                const addedVariantsList = document.getElementById('addedVariantsList');
                addedVariantsList.innerHTML = '';
                
                if (addedVariants.length === 0) {
                    document.getElementById('addedVariantsSection').style.display = 'none';
                } else {
                    addedVariants.forEach((variant, index) => {
                        displayAddedVariant(variant, index);
                    });
                }
            }
            
            // Clear variant selections
            function clearVariantSelections() {
                const variantSelect = document.getElementById('productVariant');
                const variantAttributeSelect = document.getElementById('productVariantAtt');
                
                // Reset variant select
                variantSelect.value = '';
                
                // Reset variant attribute select
                variantAttributeSelect.value = '';
                variantAttributeSelect.disabled = true;
                variantAttributeSelect.innerHTML = '<option value="">Select Variant First</option>';
            }
            
            // Initialize variant filtering functionality
            function initializeVariantFiltering() {
                // Get variant attributes data from backend
                const variantAttributesData = <%- JSON.stringify(variantAttributes) %>;
                console.log('Variant attributes data:', variantAttributesData);
                
                const variantSelect = document.getElementById('productVariant');
                const variantAttributeSelect = document.getElementById('productVariantAtt');
                
                // Add event listener for variant selection change
                variantSelect.addEventListener('change', function() {
                    const selectedVariantId = this.value;
                    console.log("selectedVariantId: ",selectedVariantId)
                    updateVariantAttributes(selectedVariantId, variantAttributesData);
                });
            }
            
            // Update variant attributes based on selected variant
            function updateVariantAttributes(selectedVariantId, variantAttributesData) {
                const variantAttributeSelect = document.getElementById('productVariantAtt');
                
                // Clear current options
                variantAttributeSelect.innerHTML = '';
                
                if (!selectedVariantId) {
                    // No variant selected - disable and show placeholder
                    variantAttributeSelect.disabled = true;
                    variantAttributeSelect.innerHTML = '<option value="">Select Variant First</option>';
                    document.querySelector('#productVariantAtt').parentElement.querySelector('.form-text').textContent = 'Select a variant first to see available attributes';
                    return;
                }
                
                // Filter attributes for the selected variant
                const filteredAttributes = variantAttributesData.filter(attr => 
                    attr.variantName && attr.variantName._id === selectedVariantId
                );
                
                if (filteredAttributes.length === 0) {
                    // No attributes found for this variant
                    variantAttributeSelect.disabled = true;
                    variantAttributeSelect.innerHTML = '<option value="">No attributes available for this variant</option>';
                    document.querySelector('#productVariantAtt').parentElement.querySelector('.form-text').textContent = 'No attributes available for this variant';
                    return;
                }
                
                // Enable the select and add default option
                variantAttributeSelect.disabled = false;
                variantAttributeSelect.innerHTML = '<option value="">Select Attribute</option>';
                
                // Add filtered attributes
                filteredAttributes.forEach(attr => {
                    const option = document.createElement('option');
                    option.value = attr._id;
                    option.textContent = attr.name;
                    variantAttributeSelect.appendChild(option);
                });
                
                // Update help text
                document.querySelector('#productVariantAtt').parentElement.querySelector('.form-text').textContent = `Select an attribute for the selected variant (${filteredAttributes.length} available)`;
            }
            
            // Event listeners
            document.addEventListener('DOMContentLoaded', function() {
                // Auto-dismiss alerts
                const alerts = document.querySelectorAll('.alert.alert-dismissible');
                alerts.forEach(function(alert) {
                    setTimeout(function() {
                        const bsAlert = new bootstrap.Alert(alert);
                        bsAlert.close();
                    }, 5000);
                });
            });
        </script>
<%- include('../partials/footer') %>

        <style>
            /* ComboTree Plugin Styling to match Bootstrap theme */
            .comboTreeWrapper {
                position: relative;
                width: 100%;
            }
            
            .comboTreeInputWrapper {
                position: relative;
                width: 100%;
            }
            
            .comboTreeInputBox {
                display: block;
                width: 100%;
                padding: 0.375rem 0.75rem;
                font-size: 1rem;
                font-weight: 400;
                line-height: 1.5;
                color: #212529;
                background-color: #fff;
                background-clip: padding-box;
                border: 1px solid #ced4da;
                appearance: none;
                border-radius: 0.375rem;
                transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
            }
            
            .comboTreeInputBox:focus {
                color: #212529;
                background-color: #fff;
                border-color: #86b7fe;
                outline: 0;
                box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
            }
            
            .comboTreeArrowBtn {
                position: absolute;
                top: 50%;
                right: 0.75rem;
                transform: translateY(-50%);
                width: 16px;
                height: 16px;
                background: none;
                border: none;
                cursor: pointer;
                color: #6c757d;
                z-index: 3;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            
            .comboTreeArrowBtnImg {
                font-size: 16px;
            }
            
            .comboTreeDropDownContainer {
                position: absolute;
                top: 100%;
                left: 0;
                right: 0;
                background: #fff;
                border: 1px solid rgba(0, 0, 0, 0.15);
                border-radius: 0.375rem;
                max-height: 300px;
                overflow-y: auto;
                overflow-x: hidden;
                z-index: 1000;
                box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
                display: none;
                margin-top: 0.125rem;
                scrollbar-width: thin;
                scrollbar-color: #ced4da #f8f9fa;
            }
            
            .comboTreeDropDownContainer::-webkit-scrollbar {
                width: 8px;
            }
            
            .comboTreeDropDownContainer::-webkit-scrollbar-track {
                background: #f8f9fa;
                border-radius: 4px;
                margin: 4px 0;
            }
            
            .comboTreeDropDownContainer::-webkit-scrollbar-thumb {
                background: #ced4da;
                border-radius: 4px;
                border: 1px solid #f8f9fa;
            }
            
            .comboTreeDropDownContainer::-webkit-scrollbar-thumb:hover {
                background: #adb5bd;
            }
            
            .comboTreeDropDownContainer::-webkit-scrollbar-thumb:active {
                background: #6c757d;
            }
            
            .comboTreeDropDownContent {
                padding: 0.5rem 0;
            }
            
            .comboTreeDropDownContainer ul {
                list-style: none;
                margin: 0;
                padding: 0;
            }
            
            .comboTreeDropDownContainer li {
                padding: 0;
                margin: 0;
            }
            
            .comboTreeItemTitle {
                display: block;
                padding: 0.25rem 1rem;
                clear: both;
                font-weight: 400;
                color: #212529;
                text-align: inherit;
                text-decoration: none;
                white-space: nowrap;
                background-color: transparent;
                border: 0;
                cursor: pointer;
                transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out;
                width: 100%;
            }
            
            .comboTreeItemTitle:hover,
            .comboTreeItemTitle:focus {
                color: #1e2125;
                background-color: #e9ecef;
            }
            
            .comboTreeItemTitle.comboTreeItemHover {
                color: #1e2125;
                background-color: #e9ecef;
            }
            
            .comboTreeParentPlus {
                display: inline-block;
                margin-right: 0.5rem;
                color: #6c757d;
                cursor: pointer;
                width: 16px;
                text-align: center;
            }
            
            .ComboTreeItemParent > .comboTreeItemTitle {
                font-weight: 500;
            }
            
            /* Bootstrap form styling consistency */
            .form-label {
                margin-bottom: 0.5rem;
                font-weight: 500;
                color: #212529;
            }
            
            .form-text {
                margin-top: 0.25rem;
                font-size: 0.875em;
                color: #6c757d;
            }
            
            /* Ensure dropdown appears above other elements */
            .comboTreeWrapper {
                z-index: 1050;
            }
        </style>

        <!-- Include comboTree CSS -->
        <link rel="stylesheet" href="/combotree/combotreestyle.css">
        
        <!-- Include comboTree JS -->
        <script src="/combotree/comboTreePlugin.js"></script>

        <script>
            $(document).ready(function() {
                // Category tree data from backend
                var categoryTreeData = <%- JSON.stringify(categoryTree) %>
                
                // Add a "Root Category" option at the beginning
                var comboTreeData = [
                    {
                        id: '',
                        title: 'Root Category',
                        isSelectable: true
                    }
                ];
                
                // Add the actual category tree data
                if (categoryTreeData && categoryTreeData.length > 0) {
                    comboTreeData = comboTreeData.concat(categoryTreeData);
                }
                
                // Initialize comboTree
                var comboTree = $('#categoryParentTree').comboTree({
                    source: comboTreeData,
                    isMultiple: false,
                    collapse: false,
                    selectableLastNode: true
                });
                
                // Handle selection change
                comboTree.onChange(function() {
                    var selectedIds = comboTree.getSelectedIds();
                    var selectedId = selectedIds && selectedIds.length > 0 ? selectedIds[0] : '';
                    $('#categoryParent').val(selectedId);
                });
            });
        </script>

    </body>
</html>
